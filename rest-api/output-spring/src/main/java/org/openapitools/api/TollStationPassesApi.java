/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.GetTollStationPasses200Response;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-12-23T20:10:50.412641800+02:00[Europe/Athens]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "tollStationPasses", description = "the tollStationPasses API")
public interface TollStationPassesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /tollStationPasses/{tollStationID}/{date_from}/{date_to} : Get total toll station passes from a period
     * Returns the total number of station passes from &#x60;date_from&#x60; to &#x60;date_to&#x60; for a given station.
     *
     * @param tollStationID ID of the toll station (required)
     * @param dateFrom Start date in the format YYYYMMDD (required)
     * @param dateTo End date in the format YYYYMMDD (required)
     * @param format Response format (json or csv). Defaults to json. (optional, default to json)
     * @return Success - Returns the toll passes data for the requested period (status code 200)
     *         or No Content - The request was successful, but no data is available (status code 204)
     *         or Bad Request - Invalid parameters or missing information (status code 400)
     *         or Unauthorized - Not used in the current API (status code 401)
     *         or Internal Server Error - An unexpected error occurred (status code 500)
     *         or Unsupported Media Type - Format not supported (e.g., invalid CSV format) (status code 415)
     */
    @Operation(
        operationId = "getTollStationPasses",
        summary = "Get total toll station passes from a period",
        description = "Returns the total number of station passes from `date_from` to `date_to` for a given station.",
        responses = {
            @ApiResponse(responseCode = "200", description = "Success - Returns the toll passes data for the requested period", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GetTollStationPasses200Response.class))
            }),
            @ApiResponse(responseCode = "204", description = "No Content - The request was successful, but no data is available"),
            @ApiResponse(responseCode = "400", description = "Bad Request - Invalid parameters or missing information"),
            @ApiResponse(responseCode = "401", description = "Unauthorized - Not used in the current API"),
            @ApiResponse(responseCode = "500", description = "Internal Server Error - An unexpected error occurred"),
            @ApiResponse(responseCode = "415", description = "Unsupported Media Type - Format not supported (e.g., invalid CSV format)")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/tollStationPasses/{tollStationID}/{date_from}/{date_to}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GetTollStationPasses200Response> getTollStationPasses(
        @Parameter(name = "tollStationID", description = "ID of the toll station", required = true, in = ParameterIn.PATH) @PathVariable("tollStationID") String tollStationID,
        @Pattern(regexp = "^\\d{8}$") @Parameter(name = "date_from", description = "Start date in the format YYYYMMDD", required = true, in = ParameterIn.PATH) @PathVariable("date_from") String dateFrom,
        @Pattern(regexp = "^\\d{8}$") @Parameter(name = "date_to", description = "End date in the format YYYYMMDD", required = true, in = ParameterIn.PATH) @PathVariable("date_to") String dateTo,
        @Parameter(name = "format", description = "Response format (json or csv). Defaults to json.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "format", required = false, defaultValue = "json") String format
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"periodTo\" : \"periodTo\", \"nPasses\" : 0, \"requestTimestamp\" : \"requestTimestamp\", \"periodFrom\" : \"periodFrom\", \"passList\" : [ { \"tagProvider\" : \"tagProvider\", \"passType\" : \"home\", \"passIndex\" : 6, \"tagID\" : \"tagID\", \"passID\" : \"passID\", \"passCharge\" : \"passCharge\", \"timestamp\" : \"timestamp\" }, { \"tagProvider\" : \"tagProvider\", \"passType\" : \"home\", \"passIndex\" : 6, \"tagID\" : \"tagID\", \"passID\" : \"passID\", \"passCharge\" : \"passCharge\", \"timestamp\" : \"timestamp\" } ], \"stationOperator\" : \"stationOperator\", \"stationID\" : \"stationID\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
